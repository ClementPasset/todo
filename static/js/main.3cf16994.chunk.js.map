{"version":3,"sources":["utils/colors.js","components/Header/index.js","components/Item/index.js","components/Todo/index.js","components/List/index.js","components/AddButton/index.js","components/App.js","index.js"],"names":["colors","StyledHeading","styled","h1","Header","Item","item","index","removeItem","todo","lists","setLists","onChange","e","todoIndex","findIndex","elt","name","itemIndex","list","text","newLists","checked","type","id","htmlFor","onClick","style","Todo","useState","isSelected","setSelected","setName","addTask","target","value","push","splice","filter","deleteTodo","handleInputValidation","Fragment","onKeyDown","keyCode","onBlur","length","map","StyledTitle","h2","Listing","ul","List","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","StyledButton","button","AddButton","nombre","addList","StyledMain","main","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cf16994.chunk.js","sourcesContent":["export const colors = {\r\n    blue: '#42CAFD',\r\n    green: '#66B3BA',\r\n    olive: '#8EB19D',\r\n    yellow: '#F6EFA6',\r\n    pink: '#F0D2D1'\r\n};","import styled from \"styled-components\";\nimport { colors } from \"../../utils/colors\";\n\nconst StyledHeading = styled.h1`\n  text-align:center;\n  color:${colors.green}\n`;\n\nconst Header = () => {\n  return (\n    <header>\n      <StyledHeading>ToDo List</StyledHeading>\n    </header>\n  );\n};\n\nexport default Header;","import React from \"react\";\r\n\r\nconst Item = ({ item, index, removeItem, todo, lists, setLists }) => {\r\n\r\n    const handleChecked = (e) => {\r\n        let todoIndex = lists.findIndex(elt => elt.name === todo.name);\r\n        let itemIndex = todo.list.findIndex(elt => elt.text === item.text);\r\n        let newLists = [...lists];\r\n        newLists[todoIndex].list[itemIndex].checked = !newLists[todoIndex].list[itemIndex].checked;\r\n        setLists(newLists);\r\n    };\r\n\r\n    return (\r\n        <li>\r\n            <input onChange={handleChecked} type=\"checkbox\" checked={item.checked} id={`${item.text}-${index}`} />\r\n            <label htmlFor={`${item.text}-${index}`}>\r\n                {item.text}\r\n                <span onClick={() => removeItem(todo, index)} style={{ 'cursor': 'pointer' }}>     ❌     </span>\r\n            </label>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Item;\r\n\r\n/*<li key={`task-${elt.text}-${index}`}><input type=\"checkbox\" id={`task-${elt.text}-${index}`} /><label htmlFor={`task-${elt.text}-${index}`}>{elt.text}<span onClick={() => removeItem(todo, index)} style={{ 'cursor': 'pointer' }}>     ❌     </span></label></li>*/","import React, { useState } from \"react\";\r\nimport Item from \"../Item\";\r\n\r\nconst Todo = ({ lists, setLists, todo }) => {\r\n\r\n    const [isSelected, setSelected] = useState(false);\r\n    const [name, setName] = useState(todo.name);\r\n\r\n    const addTask = (e) => {\r\n        if (e.target.value !== \"\") {\r\n            const newLists = [...lists];\r\n            let index = newLists.findIndex(value => value.name === todo.name);\r\n            newLists[index].list.push({ text: e.target.value, checked: false });\r\n            setLists(newLists);\r\n            e.target.value = '';\r\n        }\r\n    }\r\n\r\n    const removeItem = (todo, index) => {\r\n        todo.list.splice(index, 1);\r\n        let newLists = [...lists];\r\n        newLists.filter(elt => elt.name !== todo.name);\r\n        setLists(newLists);\r\n    }\r\n\r\n    const deleteTodo = () => {\r\n        const newLists = [...lists];\r\n        let index = newLists.findIndex(elt => elt.name === todo.name);\r\n        newLists.splice(index, 1);\r\n        setLists(newLists);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const handleInputValidation = (e) => {\r\n        if (e.target.value !== '') {\r\n            const newLists = [...lists];\r\n            let index = newLists.findIndex(elt => elt.name === todo.name);\r\n            newLists[index].name = name;\r\n            setLists(newLists);\r\n            setSelected(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!isSelected && <h3 onClick={() => setSelected(true)}>{name}<span onClick={deleteTodo} style={{ 'cursor': 'pointer' }}>    ❌     </span></h3>}\r\n            {isSelected && <React.Fragment><input onChange={handleInputChange} onKeyDown={(e) => {\r\n                if (e.keyCode === 13) {\r\n                    handleInputValidation(e);\r\n                }\r\n            }} onBlur={handleInputValidation} style={{ 'margin': '1.5rem' }} type='text' value={name} /><span onClick={deleteTodo} style={{ 'cursor': 'pointer' }}>    ❌     </span></React.Fragment>}\r\n            <ul>\r\n                {todo.list.length > 0 && todo.list.map((elt, index) => <Item lists={lists} setLists={setLists} key={`task-${elt.text}-${index}`} item={elt} index={index} todo={todo} removeItem={removeItem} />)}\r\n                <li><input onKeyDown={(e) => {\r\n                    if (e.keyCode === 13) {\r\n                        addTask(e);\r\n                    }\r\n                }} onBlur={addTask} type=\"text\" /></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Todo from \"../Todo\";\r\nimport './todo.css';\r\n\r\nconst StyledTitle = styled.h2`\r\ntext-align:center;\r\npadding-right:10rem;\r\n`;\r\n\r\nconst Listing = styled.ul`\r\nwidth:fit-content;\r\nmargin: 0 auto;\r\n`;\r\n\r\nconst List = ({ lists, setLists }) => {\r\n\r\n    useEffect(() => {\r\n        setLists(JSON.parse(localStorage.getItem('todoLists')) ?? []);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todoLists', JSON.stringify(lists));\r\n    }, [lists]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {lists.length > 0 && <StyledTitle>Mes listes : </StyledTitle>}\r\n            <Listing>\r\n                {lists.map((todo, index) => {\r\n                    return (<Todo key={`${todo.name}-${index}`} lists={lists} setLists={setLists} todo={todo} />);\r\n                })}\r\n            </Listing>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default List;","import styled from \"styled-components\";\r\nimport { colors } from \"../../utils/colors\";\r\n\r\nconst StyledButton = styled.button`\r\n    width: 60%;\r\n    display:block;\r\n    margin: 1rem auto;\r\n    height:50px;\r\n    border: none;\r\n    background: linear-gradient(to bottom right, ${colors.green}, ${colors.olive});\r\n    color: ${colors.yellow};\r\n    font-size: 1.5rem;\r\n    cursor: pointer;\r\n    &:hover{\r\n        background: linear-gradient(to bottom right, ${colors.olive}, ${colors.green});\r\n    }\r\n`;\r\n\r\nconst AddButton = ({ lists, setLists }) => {\r\n\r\n    const addList = () => {\r\n        const nombre = lists.length + 1;\r\n        setLists([...lists, { name: `Liste ${nombre}`, list: [] }]);\r\n    }\r\n\r\n    return <StyledButton onClick={() => addList()}>Ajouter une liste</StyledButton>;\r\n};\r\n\r\nexport default AddButton;","import styled from \"styled-components\";\r\nimport React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport List from \"./List\";\r\nimport AddButton from \"./AddButton\";\r\nimport '../utils/GlobalStyle.css';\r\n\r\nconst StyledMain = styled.main`\r\n  width: 60%;\r\n  margin: 2rem auto;\r\n`;\r\n\r\nconst App = () => {\r\n    const [lists, setLists] = useState([]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header />\r\n            <StyledMain>\r\n                <List lists={lists} setLists={setLists} />\r\n                <AddButton lists={lists} setLists={setLists} />\r\n            </StyledMain>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}